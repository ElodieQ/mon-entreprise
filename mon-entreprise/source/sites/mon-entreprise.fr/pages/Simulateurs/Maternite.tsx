import emoji from 'react-easy-emoji'
import React, { useState } from 'react'
import { Question, BooleanQuestion } from 'Components/conversation/Question'
import { StackedBarChartTest } from 'Components/StackedBarChart'
import { Explicable } from 'Components/conversation/Explicable'
import StatutDescription from '../Cr√©er/StatutDescription'
import { mapAccumRight } from 'ramda'

type State = Partial<{
	nbChildren: string
	nbDependantChildren: string
	pregnancyRelatedIllness: boolean
	childBirthRelatedIllness: boolean
	isBorn: boolean
	isPreterm: boolean
	nbDaysPreterm: number
	childIsHospitalized: boolean
	childBirthDate: string
	isSharedLeaveAdotption: boolean
	childLongHospitalized: boolean
	advancePrenatalLeave: boolean
	nbDaysAdvancePrenatal: number
}>

type LeaveType = Partial<{ leaveType: string }>

export default function Maternit√©() {
	const [leaveType, setLeaveType] = useState<LeaveType>({})
	const bindLeaveType = <Key extends keyof LeaveType>(key: Key) => ({
		currentValue: leaveType[key],
		onChange: (val: LeaveType[Key]) => setLeaveType(s => ({ ...s, [key]: val }))
	})
	return (
		<>
			<h1>Simulateur de cong√© maternit√© {emoji('üë∂')}</h1>
			<Question
				question="Vous voulez-prendre un ..."
				choices={[
					{ value: 'maternity', label: 'Cong√© maternit√©' },
					{
						value: 'paternity',
						label: "Cong√© paternit√© et d'accueil d'enfant"
					},
					{ value: 'adoption', label: "Cong√© d'adoption" }
				]}
				{...bindLeaveType('leaveType')}
			/>
			{leaveType.leaveType === 'adoption' ? (
				<Adoption />
			) : leaveType.leaveType === 'maternity' ? (
				<Maternit√©2 />
			) : leaveType.leaveType === 'paternity' ? (
				<Paternit√© />
			) : null}
		</>
	)
}

function Adoption() {
	const [state, setState] = useState<State>({})
	const bind = <Key extends keyof State>(key: Key) => ({
		currentValue: state[key],
		onChange: (val: State[Key]) => setState(s => ({ ...s, [key]: val }))
	})
	let congeAdoption =
		state.nbChildren === '1' ? (state.nbDependantChildren == '0' ? 10 : 18) : 22
	let extraDays = state.isSharedLeaveAdotption
		? state.nbChildren === '1'
			? 11
			: 18
		: 0
	return (
		<>
			<BooleanQuestion
				question="Souhaitez-vous partager votre cong√© d'adoption avec votre conjoint ?"
				explication="S'il est partag√©, le cong√© d'adoption doit √™tre r√©parti en deux p√©riodes de temps dont la plus courte doit √™tre au moins de 11 jours. Vous pouvez prendre votre cong√© d'adoption en m√™me temps que votre conjoint mais la somme de vos deux p√©riodes de cong√©s ne peut d√©passer la dur√©e l√©gale du cong√© d'adoption."
				{...bind('isSharedLeaveAdotption')}
			/>

			<Question
				question="Vous adoptez ..."
				choices={[
					{ value: '1', label: '1 enfant' },
					{ value: '2', label: 'plusieurs enfants' }
				]}
				{...bind('nbChildren')}
			/>

			<Question
				question="Combien d'enfant avez-vous d√©j√† √† charge ?"
				explication="Les enfants doivent √™tre √† charge effective et permanente https://www.service-public.fr/particuliers/vosdroits/F16947 "
				choices={[
					{ value: '0', label: '0 ou 1 enfant' },
					{ value: '2', label: 'plusieurs enfants' }
				]}
				{...bind('nbDependantChildren')}
			/>

			<div
				css={`
					background-color: var(--lightestColor);
					margin: 2rem 0px;
					padding: 1rem;
				`}
			>
				<h3>R√©sulats</h3>
				<ul>
					<li>
						{' '}
						<strong>Dur√©e du cong√© :</strong>
						{state.isSharedLeaveAdotption
							? ` ${congeAdoption} semaines et ${extraDays} jours`
							: ` ${congeAdoption} semaines`}{' '}
					</li>
				</ul>
				<p>
					Ce cong√© peut pr√©c√©der de sept jours cons√©cutifs, au plus, l'arriv√©e
					de l'enfant au foyer.{' '}
				</p>
			</div>
		</>
	)
}

function Maternit√©2() {
	const [state, setState] = useState<State>({ nbDaysPreterm: 0 })
	const bind = <Key extends keyof State>(key: Key) => ({
		currentValue: state[key],
		onChange: (val: State[Key]) => setState(s => ({ ...s, [key]: val }))
	})
	const today = new Date()
	const pad = (n: number): string => (+n < 10 ? `0${n}` : '' + n)
	const today_start_calendar =
		today.getFullYear() +
		'-' +
		pad(today.getMonth() + 1) +
		'-' +
		today.getDate()
	let {
		date_start_prenatal,
		date_fin_postnatal,
		min_date_fin_postnatal,
		min_date_start_prenatal,
		postnatal,
		prenatal
	} = Result({ state })
	return (
		<>
			Pour percevoir des ind√©mnit√©s journali√®res, vous devez prendre au minimum
			8 semaines de cong√©s : 2 semaines en pr√©natal et 6 en posnatal.
			<Question
				question="Nombre d'enfants √† na√Ætre ?"
				choices={[
					{ value: '1' },
					{ value: '2' },
					{ value: '3', label: '3 et plus' }
				]}
				{...bind('nbChildren')}
			/>
			{state.nbChildren === '1' && (
				<Question
					question="Combien d'enfants avez-vous d√©j√† √† charge ?"
					choices={[
						{ value: '0', label: '0 ou 1' },
						{ value: '2', label: '2 ou plus' }
					]}
					{...bind('nbDependantChildren')}
				/>
			)}
			<BooleanQuestion
				question="Avez-vous une pathologie li√©e √† la grossesse ?"
				explication="Si la grossesse pathologique est due √† une exposition de la m√®re in utero au distilb√®ne, le cong√© de maternit√© d√©bute le 1er jour d'arr√™t de travail et peut durer jusqu'au cong√© pr√©natal normal."
				{...bind('pregnancyRelatedIllness')}
			/>
			<BooleanQuestion
				question="L'accouchement a-t-il d√©j√† eu lieu ?"
				{...bind('isBorn')}
			/>
			{state.isBorn ? (
				<>
					<p> Quand l'accouchement a-t-il eu lieu ? </p>
					<input
						type="date"
						id="start"
						name="trip-start"
						value={state.childBirthDate ?? today_start_calendar}
						max={today_start_calendar}
						pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}"
						onChange={event => {
							const val = event.target.value
							setState(state => ({
								...state,
								childBirthDate: val
							}))
						}}
					/>
				</>
			) : (
				<>
					<p> Quand l'accouchement est-il pr√©vu ?</p>
					<input
						type="date"
						id="start"
						name="trip-start"
						value={state.childBirthDate ?? today_start_calendar}
						min={today_start_calendar}
						pattern="[0-9]{4}-[0-9]{2}-[0-9]{2}"
						onChange={event => {
							const val = event.target.value
							setState(state => ({
								...state,
								childBirthDate: val
							}))
						}}
					/>
				</>
			)}
			{!state.isBorn &&
				(state.nbChildren === '2' ||
					state.nbChildren === '3' ||
					state.nbDependantChildren == '2') && (
					<BooleanQuestion
						question="Souhaitez-vous avancer le d√©but de votre cong√© pr√©natal ?"
						explication={`
						Vous pouvez avancer votre cong√© pr√©natal jusqu'√† ${
							!state.isBorn &&
							(state.nbChildren === '2' || state.nbChildren === '3')
								? 4
								: 2
						} semaines. La
						dur√©e du cong√© postnatal sera r√©duite d'autant de jours`}
						{...bind('advancePrenatalLeave')}
					/>
				)}
			{state.advancePrenatalLeave && (
				<>
					<p>De combien de jours souhaitez-vous avancer le cong√© pr√©natal ? </p>
					<input
						type="text"
						name="nbDaysAdvancePrenatal"
						value={state.nbDaysAdvancePrenatal ?? 0}
						max={
							state.nbChildren === '2' || state.nbChildren === '3'
								? 4 * 7
								: 2 * 7
						}
						onChange={event => {
							const val = event.target.value
							Number(val)
								? setState(state => ({
										...state,
										nbDaysAdvancePrenatal: Number(val)
								  }))
								: setState(state => ({
										...state,
										nbDaysAdvancePrenatal: 0
								  }))
						}}
					/>
				</>
			)}
			{state.isBorn && (
				<BooleanQuestion
					question="L'enfant est-il n√© pr√©matur√© ?"
					{...bind('isPreterm')}
				/>
			)}
			{state.isBorn && (
				<BooleanQuestion
					question="Avez-vous une pathologie li√©e √† l'accouchement ?"
					{...bind('childBirthRelatedIllness')}
				/>
			)}
			{state.isPreterm && (
				<>
					<p> De combien de jours l'enfant est-il n√© pr√©matur√© ?</p>
					<input
						type="text"
						name="nbDaysPreterm"
						value={state.nbDaysPreterm ?? 0}
						max={140}
						onChange={event => {
							const val = event.target.value
							Number(val)
								? setState(state => ({
										...state,
										nbDaysPreterm: Number(val)
								  }))
								: setState(state => ({
										...state,
										nbDaysPreterm: 0
								  }))
						}}
					/>
				</>
			)}
			{state.nbDaysPreterm > 42 && (
				<BooleanQuestion
					question="L'enfant a-t-il du √™tre hospitalis√© apr√®s l'accouchement ?"
					{...bind('childIsHospitalized')}
				/>
			)}
			<div
				css={`
					margin: 3rem 0px;
				`}
			>
				<h3>
					R√©sultats :{' '}
					<Explicable>
						<ul>
							{state.pregnancyRelatedIllness && (
								<li>
									{' '}
									Du fait de la pathologie li√©e √† la grossesse, 2 semaines de
									cong√© avant le cong√© pr√©natal sont ici compatabilis√©es. Ce
									cong√© suppl√©mentaire peut √™tre prescrit √† tout moment √† partir
									de la d√©claration de la grossesse et √™tre pris en plusieurs
									p√©riodes.
								</li>
							)}
							{state.childBirthRelatedIllness && (
								<li>
									{' '}
									Du fait de la pathologie li√©e √† l'accouchement, 4 semaines de
									cong√© apr√®s le cong√© postnatal sont ici comptabilis√©es. Elles
									peuvent √™tre accord√©es sur prescription m√©dicale.
								</li>
							)}
							<li>
								{' '}
								La travailleuse ind√©pendant en cong√© maternit√© pourra reprendre
								son activit√© en temps partiel : 1 jour par semaine pendant les 4
								semaines suivants la p√©riode minimale d'interruption d'activit√©
								de 8 semaines puis 2 jours par semaines pendant les 4 semaines
								suivantes.
							</li>
							<li>
								Vous pouvez demander √† votre m√©decin de reporter une partie de
								votre cong√© pr√©natal sur votre cong√© posnatal dans la limite de
								3 semaines. En cas d'arr√™t maladie prescrit pendant la p√©riode
								de report, le report est annul√© que cet arr√™t de travail soit en
								lien ou non avec la grossesse.{' '}
							</li>
							<li>
								En cas d'hospitalisation de l'enfant au-del√† de la 6e semaine
								apr√®s sa naissance, la m√®re peut choisir de reprendre son
								travail. Elle devra prendre la p√©riode de cong√© postnatal non
								utilis√©e d√®s la fin de l'hospitalisation de l'enfant.{' '}
							</li>
							<li>
								Lorsque l'enfant d√©c√®de apr√®s sa naissance, la m√®re conserve son
								cong√© postnatal. En cas de d√©c√®s li√© √† une naissance pr√©matur√©e,
								la m√®re a droit au cong√© de maternit√© en totalit√© si l'enfant
								est n√© viable. Le seuil de viabilit√© se situe √† 22 semaines
								d'am√©norrh√©e ou si le f≈ìtus pesait au moins 500 grammes. Dans le
								cas contraire, la m√®re est plac√©e en cong√© de maladie ordinaire.
							</li>
						</ul>
					</Explicable>{' '}
				</h3>
				<StackedBarChartTest
					data={[
						{
							value: prenatal - 14,
							startDate: state.childBirthDate
								? new Date(date_start_prenatal).toLocaleString('default', {
										day: 'numeric',
										month: 'short',
										year: 'numeric'
								  })
								: '',
							key: 'prenatal',
							legend: 'Cong√© pr√©natal',
							sublegend:
								prenatal % 7 === 0 ? (
									<strong> {Math.trunc(prenatal / 7)} semaines</strong>
								) : (
									<strong>
										{Math.trunc(prenatal / 7)} semaines et {prenatal % 7} jours
									</strong>
								),
							color: '#549f72'
						},
						{
							value: 14,
							key: 'obligatoire prenatal',
							topTickLeft: 'Cong√© pr√©natal minimal',
							startDate: state.childBirthDate
								? new Date(min_date_start_prenatal).toLocaleString('default', {
										day: 'numeric',
										month: 'short',
										year: 'numeric'
								  })
								: '',
							endDate: state.childBirthDate
								? new Date(state.childBirthDate).toLocaleString('default', {
										day: 'numeric',
										month: 'short',
										year: 'numeric'
								  })
								: 'Accouchement',
							color: '#549f72'
						},
						{
							value: 42,
							key: 'min postnatal',
							topTickRight: 'Cong√© postnatal minimal',
							endDate: state.childBirthDate
								? new Date(min_date_fin_postnatal).toLocaleString('default', {
										day: 'numeric',
										month: 'short',
										year: 'numeric'
								  })
								: '',
							color: '#5a8adb'
						},
						{
							value: postnatal - 42,
							endDate: state.childBirthDate
								? new Date(date_fin_postnatal).toLocaleString('default', {
										day: 'numeric',
										month: 'short',
										year: 'numeric'
								  })
								: '',
							key: 'postnatal',
							legend: 'Cong√© postnatal',
							sublegend:
								postnatal % 7 === 0 ? (
									<strong> {Math.trunc(postnatal / 7)} semaines</strong>
								) : (
									<strong>
										{Math.trunc(postnatal / 7)} semaines et {postnatal % 7}{' '}
										jours
									</strong>
								),
							color: '#5a8adb'
						}
					]}
				/>
			</div>
		</>
	)
}

function Result({ state }: { state: State }) {
	//Number of dependent and unborn children
	let prenatal =
		state.nbChildren === '3'
			? 24 * 7
			: state.nbChildren === '2'
			? 12 * 7
			: state.nbDependantChildren === '2'
			? 8 * 7
			: 6 * 7
	let postnatal =
		state.nbChildren === '3'
			? 22 * 7
			: state.nbChildren === '2'
			? 22 * 7
			: state.nbDependantChildren === '2'
			? 18 * 7
			: 10 * 7

	//Pregnancy-related or ChildBrith-related illness
	prenatal += state.pregnancyRelatedIllness ? 2 * 7 : 0
	postnatal += state.childBirthRelatedIllness ? 4 * 7 : 0

	//Preterm and Child Hospitalized after ChildBirth
	postnatal +=
		state.isPreterm && state.childIsHospitalized
			? state.nbDaysPreterm
			: Math.min(42, state.nbDaysPreterm)

	prenatal -= state.isPreterm ? state.nbDaysPreterm : 0

	let date_fin_postnatal = new Date()
	let date_start_prenatal = new Date()
	let min_date_start_prenatal = new Date()
	let min_date_fin_postnatal = new Date()
	const childBirthDate = new Date(state.childBirthDate)
	date_fin_postnatal.setDate(childBirthDate.getDate() + postnatal)
	date_start_prenatal.setDate(childBirthDate.getDate() - prenatal)
	min_date_start_prenatal.setDate(childBirthDate.getDate() - 14)
	min_date_fin_postnatal.setDate(childBirthDate.getDate() + 42)

	// Advanced Prenatal Leave
	prenatal += state.advancePrenatalLeave
		? state.nbDaysAdvancePrenatal
			? state.nbChildren === '2' || state.nbChildren == '3'
				? Math.min(28, state.nbDaysAdvancePrenatal)
				: Math.min(14, state.nbDaysAdvancePrenatal)
			: 0
		: 0
	postnatal -= state.advancePrenatalLeave
		? state.nbDaysAdvancePrenatal
			? state.nbChildren === '2' || state.nbChildren == '3'
				? Math.min(28, state.nbDaysAdvancePrenatal)
				: Math.min(14, state.nbDaysAdvancePrenatal)
			: 0
		: 0

	return {
		date_start_prenatal,
		date_fin_postnatal,
		min_date_fin_postnatal,
		min_date_start_prenatal,
		postnatal,
		prenatal
	}
}

function Paternit√©() {
	const [state, setState] = useState<State>({ nbDaysPreterm: 0 })
	const bind = <Key extends keyof State>(key: Key) => ({
		currentValue: state[key],
		onChange: (val: State[Key]) => setState(s => ({ ...s, [key]: val }))
	})
	return (
		<>
			<p>
				Le cong√© de paternit√© et d'accueil de l'enfant est ouvert √† la personne
				vivant en couple (Mariage, Pacs, concubinage) avec la m√®re de l'enfant.
				Il peut √™tre succ√©der au cong√© de naissance de 3 jours ou √™tre pris
				s√©par√©ment.{' '}
			</p>
			<Question
				question="Nombre d'enfants √† na√Ætre ?"
				choices={[{ value: '1' }, { value: '2', label: '2 ou plus' }]}
				{...bind('nbChildren')}
			/>

			<BooleanQuestion
				question="L'accouchement a-t-il d√©j√† eu lieu ?"
				{...bind('isBorn')}
			/>
			{state.isBorn && (
				<BooleanQuestion
					question={
						state.nbChildren === '2'
							? 'Un enfant a-t-il √©t√© hospitalis√© imm√©diatement apr√®s sa naissance dans une unit√© de soins sp√©cialis√©s ?'
							: "L'enfant a-t-il √©t√© hospitalis√© imm√©diatement apr√®s sa naissance dans une unit√© de soins sp√©cialis√©s ? "
					}
					{...bind('childIsHospitalized')}
				/>
			)}

			{state.childIsHospitalized && (
				<BooleanQuestion
					question="L'enfant a-t-il √©t√© hospitalis√© plus de 6 semaines ?"
					{...bind('childLongHospitalized')}
				/>
			)}

			<div
				css={`
					background-color: var(--lightestColor);
					margin: 2rem 0px;
					padding: 1rem;
				`}
			>
				<h3>R√©sulats </h3>
				<ul>
					<li>
						<strong> Cong√© de naissance : </strong> 3 jours{' '}
					</li>
					<li>
						<strong>Dur√©e du cong√© :</strong>
						{` ${state.nbChildren === '1' ? 11 : 18} jours`}
						{state.childLongHospitalized
							? " √† prendre dans les 4 mois suivants la fin de l'hospitalisation de l'enfant."
							: ' √† prendre dans les 4 mois suivants la naissance.'}
						<Explicable>
							Les jours de cong√©s sont des jours calendaires cons√©cutifs
							(samedi,dimanche et jours f√©ri√©s compris). Ces cong√©s ne sont pas
							fractionnables. Le cong√© est aussi accord√© en cas de naissance
							d'un enfant sans vie. En cas de d√©c√®s de la m√®re il sera accord√© √†
							l'expiration du cong√© maternit√©. Il est accord√© au p√®re ou √† la
							personne vivant en couple avec la m√®re de l'enfant si le p√®re de
							l'enfant n'en b√©n√©ficie pas.
						</Explicable>{' '}
					</li>
					{state.childIsHospitalized && (
						<>
							<li>
								<strong>
									Cong√© suppl√©mentaire d√ª √† l'hospitalisation de l'enfant :
								</strong>{' '}
								jusqu'√† 30 jours cons√©cutifs pendant la p√©riode
								d'hospitalisation.
							</li>
						</>
					)}
				</ul>
			</div>
		</>
	)
}

function formatage_date(date) {
	const pad = (n: number): string => (+n < 10 ? `0${n}` : '' + n)
	const dt = new Date(date)
	return (
		pad(dt.getDate()) + '/' + pad(dt.getMonth() + 1) + '/' + dt.getFullYear()
	)
}
